{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","i","this","slice","calculateWinner","setState","handleClick","status","winner","gridFilled","findIndex","x","renderSquare","resetGame","React","Component","Game","href","lines","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iQAIA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,O,IAKbC,E,kDACF,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJE,E,wDAQPC,GACR,IAAMJ,EAAUK,KAAKN,MAAMC,QAAQM,QAC/BC,EAAgBP,IAAYA,EAAQI,KAGxCJ,EAAQI,GAAKC,KAAKN,MAAMI,QAAU,IAAM,IACxCE,KAAKG,SAAS,CACVR,QAASA,EACTG,SAAUE,KAAKN,MAAMI,a,mCAIhBC,GAAI,IAAD,OACZ,OACI,kBAACX,EAAD,CACII,MAAOQ,KAAKN,MAAMC,QAAQI,GAC1BR,QAAS,kBAAM,EAAKa,YAAYL,Q,kCAMxCC,KAAKG,SAAS,CACVR,QAASC,MAAM,GAAGC,KAAK,U,+BAIrB,IAMFQ,EANC,OACCC,EAASJ,EAAgBF,KAAKN,MAAMC,SACtCY,GAAa,EAWjB,OAVuD,IAAnDP,KAAKN,MAAMC,QAAQa,WAAU,SAAAC,GAAC,OAAU,OAANA,OAClCF,GAAa,GAIbF,EADAC,EACS,WAAaA,EAEb,iBAAmBN,KAAKN,MAAMI,QAAU,IAAM,KAIvD,6BACI,yBAAKR,UAAU,6BAA6Be,GAC5C,6BACA,yBAAKf,UAAU,aACVU,KAAKU,aAAa,GAClBV,KAAKU,aAAa,GAClBV,KAAKU,aAAa,IAEvB,yBAAKpB,UAAU,aACVU,KAAKU,aAAa,GAClBV,KAAKU,aAAa,GAClBV,KAAKU,aAAa,IAEvB,yBAAKpB,UAAU,aACVU,KAAKU,aAAa,GAClBV,KAAKU,aAAa,GAClBV,KAAKU,aAAa,IAEvB,6BACA,yBAAKpB,UAAU,iBACX,yBAAKA,UAAWgB,GAAUC,EAAa,GAAK,QACxC,4BAAQjB,UAAU,MAAMC,QAAS,kBAAM,EAAKoB,cAA5C,kB,GAvEJC,IAAMC,WA+EpBC,E,uKAEE,OACI,6BACI,yBAAKxB,UAAU,QACX,yBAAKA,UAAU,kBACX,kBAACG,EAAD,QAGR,yBAAKH,UAAU,iBACX,6BACA,6BACA,6BACA,wFAA6D,uBAAGyB,KAAK,wBAAR,YAA7D,KACA,0DAA+B,uBAAGA,KAAK,4CAAR,QAA/B,W,GAdDH,IAAMC,WA4BzB,SAASX,EAAgBP,GAWrB,IAVA,IAAMqB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFjB,EAAI,EAAGA,EAAIiB,EAAMC,OAAQlB,IAAK,CAAC,IAAD,cACjBiB,EAAMjB,GADW,GAC5BmB,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIzB,EAAQuB,IAAMvB,EAAQuB,KAAOvB,EAAQwB,IAAMxB,EAAQuB,KAAOvB,EAAQyB,GAClE,OAAOzB,EAAQuB,GAGvB,OAAO,KAtBXG,IAASC,OACL,kBAACR,EAAD,MACAS,SAASC,eAAe,W","file":"static/js/main.9aeec728.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares: Array(9).fill(null),\r\n            xIsNext: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const squares = this.state.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            squares: squares,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value={this.state.squares[i]}\r\n                onClick={() => this.handleClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    resetGame() {\r\n        this.setState({\r\n            squares: Array(9).fill(null)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const winner = calculateWinner(this.state.squares);\r\n        var gridFilled = false;\r\n        if (this.state.squares.findIndex(x => x === null) === -1) {\r\n            gridFilled = true;\r\n        }\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"status-font center-button\">{status}</div>\r\n                <br />\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n                <br />\r\n                <div className=\"center-button\">\r\n                    <div className={winner || gridFilled ? '' : 'hide'}>\r\n                        <button className=\"btn\" onClick={() => this.resetGame()}>Refresh</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"game\">\r\n                    <div className=\"center-content\">\r\n                        <Board />\r\n                    </div>\r\n                </div>\r\n                <div className=\"center-button\">\r\n                    <br />\r\n                    <br />\r\n                    <br />\r\n                    <div>This is a very basic demonstration of tic tac toe using <a href=\"https://reactjs.org/\">React.js</a>.</div>\r\n                    <div>Fork this repository from <a href=\"https://github.com/Saitama0811/tictactoe\">here</a>.</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"],"sourceRoot":""}